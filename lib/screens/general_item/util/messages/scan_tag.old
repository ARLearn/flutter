import 'package:camera/camera.dart';
import 'package:firebase_ml_vision/firebase_ml_vision.dart';
import 'package:flutter/material.dart';
import 'package:youplay/actions/run_actions.dart';
import 'package:youplay/models/general_item/scan_tag.dart';
import 'package:youplay/screens/general_item/general_item.dart';
import 'package:youplay/screens/util/utils.dart';

import 'components/themed_app_bar.dart';

class ScanTagWidget extends StatefulWidget {
  ScanTagGeneralItem item;
  GeneralItemViewModel giViewModel;

  ScanTagWidget({this.item, this.giViewModel});

  @override
  _ScanTagWidgetState createState() => new _ScanTagWidgetState();
}

class _ScanTagWidgetState extends State<ScanTagWidget> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: ThemedAppBar(title: widget.item.title, elevation: true),
        body: Stack(
          alignment: const Alignment(0, 0.9),
          children: [
            Stack(
              fit: StackFit.expand,
//              alignment: const Alignment(-0.5, 0),
              children: <Widget>[
                new ItemQRScreen(widget.giViewModel),
                Padding(
                  padding: EdgeInsets.fromLTRB(30, 30, 30, 30),
                  child: Image.asset('graphics/generalItems/scanOverlay.png'),
                )
              ],
            ),
            Opacity(
                opacity: 0.9,
                child: Padding(
                  padding: EdgeInsets.fromLTRB(30, 0, 30, 10),
                  child: Card(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
//                        Container(
//                            padding: const EdgeInsets.all(10),
//                            child: Text(
//                              "${widget.item.title}",
//                              style: TextStyle(
//                                fontSize: 24,
//                                fontWeight: FontWeight.bold,
//                              ),
//                            )),
//                        Container(
//                            padding: const EdgeInsets.all(10),
//                            child: Text(
//                              "${widget.item.richText}",
//                              style: TextStyle(
//                                  fontSize: (24 /
//                                      3 *
//                                      MediaQuery.of(context).devicePixelRatio)),
//                            )),
                      ],
                    ),
                  ),
                )),
          ],
        ));
  }
}

class ItemQRScreen extends StatefulWidget {
  GeneralItemViewModel giViewModel;

  ItemQRScreen(this.giViewModel);

  @override
  ItemQRState createState() => ItemQRState();
}

class ItemQRState extends State<ItemQRScreen> {
  ItemQRState();

  List _scanResults;
  CameraController _camera;

  bool _isDetecting = false;
  bool _actionTaken = false;
  CameraLensDirection _direction = CameraLensDirection.back;

  @override
  void dispose() {
    _camera?.dispose();
    super.dispose();
  }

  void _initializeCamera() async {
    _camera = CameraController(
      await getCamera(_direction),
      ResolutionPreset.low,
    );
    await _camera.initialize();

    _camera.startImageStream((CameraImage image) {
      if (_isDetecting) return;

      _isDetecting = true;

      detect(image, FirebaseVision.instance.barcodeDetector().detectInImage)
          .then(
        (dynamic result) {
          _scanResults = result;
          if (_scanResults.isNotEmpty && !_actionTaken) {
            Barcode r = _scanResults[0];
            new Future.delayed(const Duration(milliseconds: 100), () {
              if (!widget.giViewModel.continueToNextItemWithTag(r.rawValue)) {
                new Future.delayed(const Duration(milliseconds: 200), () {
                  if (!widget.giViewModel.continueToNextItemWithTag(r.rawValue)) {
                    Navigator.pop(context);
                  }
                });
              }
            });

            widget.giViewModel.onDispatch(QrScannerAction(
                generalItemId: widget.giViewModel.item.itemId,
                runId: widget.giViewModel.run.runId,
                qrCode: r.rawValue));

            setState(() {
              _actionTaken = true;
              print("do navigator pop");

            });
          }
          setState(() {
            _isDetecting = false;
          });
        },
      ).catchError(
        (_) {
//          setState(() {
          _isDetecting = false;
//          });
        },
      );
    });
  }

  @override
  void initState() {
    super.initState();
    _initializeCamera();
  }

  Widget _buildResults() {
    if (_scanResults == null || _camera == null) {
      return Container(
        decoration: BoxDecoration(color: Colors.black),
      );
//      return const Text(' ');
    }

    CustomPainter painter;

    final Size imageSize = Size(
      _camera.value.previewSize.height,
      _camera.value.previewSize.width,
    );

    painter = BarcodeDetectorPainter(imageSize, _scanResults);

    return CustomPaint(
      painter: painter,
    );
  }

  Widget _buildImage() {
    return Container(
      constraints: const BoxConstraints.expand(),
      child: _camera == null
          ? Container(
              decoration: BoxDecoration(color: Colors.black),
              child: const Center(
                child: Text(
                  'Camera wordt geladen...',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 20.0,
                  ),
                ),
              ))
          : CameraPreview(_camera),
//      Stack(
//              fit: StackFit.expand,
//              children: <Widget>[
//                CameraPreview(_camera),
//                _buildResults(),
//              ],
//            ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return _buildImage();
  }

}
